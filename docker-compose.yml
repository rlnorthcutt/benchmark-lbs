version: '3.8'

services:
  # Rust backend application with compute-intensive endpoints
  backend:
    build:
      context: ./backend/rust-backend
      dockerfile: Dockerfile
    networks:
      - benchmark-network
    environment:
      - TLS_CERT_PATH=/certs/server.crt
      - TLS_KEY_PATH=/certs/server.key
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--no-check-certificate", "--spider", "https://localhost:3000/api/health"]
      interval: 5s
      timeout: 3s
      retries: 5
      start_period: 10s
    ports:
      - "3000:3000"
    volumes:
      - ./certs:/certs:ro
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 1G

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    ports:
      - "8080:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./certs:/certs:ro
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - benchmark-network
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 512M

  # Caddy reverse proxy
  caddy:
    image: caddy:alpine
    ports:
      - "8081:443"
    volumes:
      - ./caddy/Caddyfile:/etc/caddy/Caddyfile:ro
      - ./certs:/certs:ro
    depends_on:
      backend:
        condition: service_healthy
    command: sh -c "sleep 2 && caddy run --config /etc/caddy/Caddyfile"
    networks:
      - benchmark-network
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 512M

  # Traefik reverse proxy
  traefik:
    image: traefik:v2.10
    ports:
      - "8082:443"
    command:
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--api.insecure=false"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./traefik/traefik.yml:/etc/traefik/traefik.yml:ro
      - ./traefik/dynamic.yml:/etc/traefik/dynamic.yml:ro
      - ./certs:/certs:ro
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - benchmark-network
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 512M

  # HAProxy reverse proxy
  haproxy:
    image: haproxy:alpine
    ports:
      - "8083:443"
    volumes:
      - ./haproxy/haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg:ro
      - ./certs:/certs:ro
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - benchmark-network
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 512M

networks:
  benchmark-network:
    driver: bridge
